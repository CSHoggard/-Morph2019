#' @rdname PCcontrib
#' @export
PCcontrib <- function(PCA, ...){
UseMethod("PCcontrib")
}
#' @rdname PCcontrib
#' @export
PCcontrib.PCA <-
function(PCA,
nax,
sd.r=c(-2, -1, -0.5, 0, 0.5, 1, 2),
gap=1,
...){
x <- PCA
shp <- list()
if (missing(nax))
nax <- 1:scree_min(x)
for (i in seq(along=nax)){
sd.i <- sd(x$x[, nax[i]])
pos.i <- data.frame(x=sd.r*sd.i, y=rep(0, length(sd)))
shp.i <- morphospace2PCA(x, xax=i, yax=1, pos = pos.i)
shp[[i]] <- mutate(shp.i, nax=i) }
shp <- dplyr::bind_rows(shp)
shp$shp <- sd.r[shp$shp]
gg <- ggplot(data=shp, aes(x=x_c + x_d, y=y_c + y_d, group=shp1)) +
geom_polygon(colour="grey50", fill="grey95") + coord_equal() +
facet_grid(nax ~ shp) + labs(x="Mean + SD", y="PC") +
theme(axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank())
print(gg)
shp <- gg$data %>%
# we dont want all columns
select(x=x_c, y=y_c, shp1, nax) %>%
# we split for each pair of nax x shp1
split(f=list(.$shp1, .$nax))
list(gg=gg, shp=shp) %>% invisible()
}
# scree ---------------
#' How many axes to retain this much of variance or trace ?
#'
#' A set of functions around PCA/LDA eigen/trace. \code{scree} calculates their proportion and cumulated proportion;
#' \code{scree_min} returns the minimal number of axis to use to retain a given proportion; \code{scree_plot} displays a screeplot.
#'
#' @param x a \link{PCA} object
#' @param nax numeric range of axes to consider.
#' All by default for `scree_min`, display until `0.99` for `scree_plot`
#' @param prop numeric how many axes are enough to gather this proportion of variance.
#' Default to 1, all axes are returned
#' defaut to 1: all axis are returned
#' @return scree returns a data.frame, scree_min a numeric, scree_plot a ggplot.
#' @examples
#' # On PCA
#' bp <- PCA(efourier(bot))
#' scree(bp)
#' scree_min(bp, 0.99)
#' scree_min(bp, 1)
#'
#' scree_plot(bp)
#' scree_plot(bp, 1:5)
#'
#' # on LDA, it uses svd
#' bl <- LDA(PCA(opoly(olea)), "var")
#' scree(bl)
#'
#' @export
#' @rdname scree
scree <- function(x, nax) {
UseMethod("scree")}
#' @export
#' @rdname scree
scree.PCA <- function(x, nax){
# calculate proportion for each axi
eig <- (x$sdev^2)
eig <- eig / sum(eig)
# if nax not provided, take all
if (missing(nax)){
nax <- 1:length(eig)
}
# return a data_frame
dplyr::data_frame(axis=nax,
proportion=eig[nax],
cumsum=cumsum(eig)[nax])
}
#' @export
#' @rdname scree
scree.LDA <- function(x, nax){
eig <- (x$mod$svd^2)
eig <- eig / sum(eig)
# if nax not provided, take all
if (missing(nax)){
nax <- 1:length(eig)
}
# return a data_frame
dplyr::data_frame(axis=nax,
proportion=eig[nax],
cumsum=cumsum(eig)[nax])
}
#' @export
#' @rdname scree
scree_min <- function(x, prop){
# early return if prop is missing
if (missing(prop)){
cat("`prop` not provided. All axes returned\n")
return(nrow(scree(x)))
}
enough <- scree(x)$cumsum >= prop
ifelse(any(enough), min(which(enough)), length(enough))
}
#' @export
#' @rdname scree
scree_plot <- function(x, nax){
# if missing,e neough to gather 99%
if (missing(nax))
nax <- 1:scree_min(x, 0.99)
# obtain the df
df <- scree(x, nax)
# for entire x-axis
df$axis <- ordered(df$axis)
ggplot(df) +
aes_string(x="axis", y="proportion") +
geom_bar(stat="identity") +
geom_text(label=round(df$cumsum, 3), vjust=0) +
labs(x="Components", y="Proportion")
}
#### borrowed from ggplot2 by Hadley
calculate_ellipse <- function(data, vars, type, level, segments){
dfn <- 2
dfd <- nrow(data) - 1
if (!type %in% c("t", "norm", "euclid")){
message("unrecognized ellipse type")
ellipse <- rbind(as.numeric(c(NA, NA)))
} else if (dfd < 3){
ellipse <- rbind(as.numeric(c(NA, NA)))
} else {
if (type == "t"){
v <- MASS::cov.trob(data[,vars])
} else if (type == "norm"){
v <- cov.wt(data[,vars])
} else if (type == "euclid"){
v <- cov.wt(data[,vars])
v$cov <- diag(rep(min(diag(v$cov)), 2))
}
shape <- v$cov
center <- v$center
chol_decomp <- chol(shape)
if (type == "euclid"){
radius <- level/max(chol_decomp)
} else {
radius <- sqrt(dfn * qf(level, dfn, dfd))
}
angles <- (0:segments) * 2 * pi/segments
unit.circle <- cbind(cos(angles), sin(angles))
ellipse <- t(center + radius * t(unit.circle %*% chol_decomp))
}
ellipse <- as.data.frame(ellipse)
colnames(ellipse) <- vars
return(ellipse)
}
calculate_ellipseax <- function(ell){
if (any(is.na(ell))) {
na <- rep(NA, 2)
seg <- data.frame(x=na, y=na, xend=na, yend=na)
return(seg)
}
ell.al <- coo_align(ell)
ell.ids <- c(which.min(ell.al[, 1]), which.max(ell.al[, 1]),
which.min(ell.al[, 2]), which.max(ell.al[, 2]))
seg <- ell[ell.ids, ]
seg <- dplyr::bind_cols(slice(seg, c(1, 3)), slice(seg, c(2, 4)))
colnames(seg) <- c("x", "y", "xend", "yend")
seg
}
##### end PCA plotters
Â© 2019 GitHub, Inc.
Terms
Privacy
Security
Status
Help
Contact GitHub
Pricing
API
Training
Blog
About
View(PCcontrib)
hearts %T>%                    # A toy dataset
stack() %>%                  # Take a family picture of raw outlines
fgProcrustes() %>%           # Full generalized Procrustes alignment
coo_slide(ldk = 2) %T>%      # Redefine a robust 1st point between the cheeks
stack() %>%                  # Another picture of aligned outlines
efourier(6, norm=FALSE) %>%  # Elliptical Fourier Transforms
PCA() %T>%                   # Principal Component Analysis
plot_PCA(~aut) %>%           # A PC1:2 plot
LDA(~aut) %>%                # Linear Discriminant Analysis
plot_CV()                    # And the confusion matrix after leave one out cross validation
devtools::load_all()
# install.packages("devtools")
devtools::install_github("MomX/Momocs")
library("MomX", lib.loc="~/R/win-library/3.4")
install.packages("Momocs")
library("Momocs", lib.loc="~/R/win-library/3.4")
hearts
plot(hearts)
stack(hearts)
install.packages(c("callr", "carData", "caTools", "checkmate", "classInt", "clipr", "coda", "colorspace", "cowplot", "cvequality", "data.table", "dbplyr", "deldir", "devtools", "digest", "DT", "e1071", "evaluate", "expm", "flexmix", "FNN", "forcats", "geiger", "ggmap", "ggridges", "ggthemes", "git2r", "gstat", "haven", "Hmisc", "htmlTable", "htmlwidgets", "httpuv", "httr", "huxtable", "igraph", "jomo", "jtools", "kableExtra", "knitr", "labelled", "later", "lme4", "lmerTest", "magick", "maptools", "markdown", "MASS", "Matrix", "mclust", "mgcv", "mice", "mitml", "modelr", "nloptr", "openssl", "packrat", "pbapply", "prabclus", "processx", "ProjectTemplate", "ps", "psych", "purrr", "quantreg", "questionr", "R6", "raster", "RcppEigen", "RCurl", "readr", "readxl", "rgdal", "RgoogleMaps", "rio", "RJSONIO", "rmarkdown", "rmdformats", "robustbase", "rsconnect", "rstan", "rstanarm", "rstudioapi", "rvcheck", "sf", "shiny", "shinydashboard", "shinythemes", "spam", "spData", "StanHeaders", "stringi", "stringr", "survey", "survival", "testthat", "tidyr", "units", "urltools", "webshot", "xfun", "XML", "xts", "zip"))
citation('Momocs')
knitr::opts_chunk$set(echo = TRUE)
if(!require("igraph")) install.packages('geomorph', repos='http://cran.us.r-project.org')
if(!require("igraph")) install.packages('igraph', repos='http://cran.us.r-project.org')
if(!require("ggraph")) install.
if(!require("igraph")) install.packages('igraph', repos='http://cran.us.r-project.org')
if(!require("ggraph")) install.packages('ggraph', repos='http://cran.us.r-project.org')
A <- rbind(c(0,0,1,1), c(1,0,0,0), c(0,0,0,1), c(0,1,0,0))
G <- graph_from_adjency_matrix(A)
library("igraph", lib.loc="~/R/win-library/3.4")
A <- rbind(c(0,0,1,1), c(1,0,0,0), c(0,0,0,1), c(0,1,0,0))
G <- graph_from_adjency_matrix(A)
A <- rbind(c(0,0,1,1), c(1,0,0,0), c(0,0,0,1), c(0,1,0,0))
G <- graph_from_adjaceency_matrix(A)
A <- rbind(c(0,0,1,1), c(1,0,0,0), c(0,0,0,1), c(0,1,0,0))
G <- graph_from_adjacency_matrix(A)
plot(g)
A <- rbind(c(0,0,1,1), c(1,0,0,0), c(0,0,0,1), c(0,1,0,0))
G <- graph_from_adjacency_matrix(A)
plot(G)
A <- rbind(c(0,0,1,1,0), c(1,0,0,0,1), c(0,0,0,1,0), c(0,1,0,0,1), c(1,1,0,0,1))
G <- graph_from_adjacency_matrix(A)
plot(G)
A <- rbind(c(0,0,1,1), c(1,0,0,0), c(0,0,0,1), c(0,1,0,0))
G <- graph_from_adjacency_matrix(A)
plot(G)
A
NG <- rbind(c("A", "B"), c("B","A"), c("B", "C"), c("C","A"))
G2 <- graph_from_edgelist(el)
NG <- rbind(c("A", "B"), c("B","A"), c("B", "C"), c("C","A"))
G2 <- graph_from_edgelist(NG)
plot(G2)
NG <- rbind(c("A", "B"), c("B","A"), c("B", "C"), c("C","A")) #matrix creation (2:4)
NG #see NG
G2 <- graph_from_edgelist(NG)
plot(G2)
G3 <- graph_from_literal(A--B, B-+C), C-+A)
G3 <- graph_from_literal(A--B, B-+C, C-+A)
G3 <- graph_from_literal(A--B, B-+C, C-+A)
plot(G3)
G3 <- graph_from_literal(A+-B, B-+C, C-+A)
plot(G3)
G3 <- graph_from_literal(A+-B, B-+C, A-+C)
plot(G3)
df <- as.data.frame(NG)
G4 <- graph_from_data_frame(df)
plot(G4)
siteedges <- read.csv("sitelist.csv")
siteedges <- read.csv("sitelist.csv")
head(siteedges, n = 15)
siteedges <- read.csv("sitelist.csv")
head(siteedges, n = 15)
siteedges <- read.csv("sitelist.csv")
head(siteedges, n = 15)
siteedges <- read.csv("sitelist.csv")
head(siteedges, n = 15)
sites <- graph_from_data_frame(siteedges, directed = TRUE)
plot(sites)
sitevertices <- read.csv("sitevertices.csv")
sites <- graph_from_dataframe)sitesedges, directed = TRUE, vertices = sitevertices)
sites <- graph_from_dataframe(sitesedges, directed = TRUE, vertices = sitevertices)
sites <- graph_from_data_frame(sitesedges, directed = TRUE, vertices = sitevertices)
sites <- graph_from_data_frame(siteedges, directed = TRUE, vertices = sitevertices)
sites <- graph_from_data_frame(siteedges, directed = TRUE, vertices = sitevertices)
siteedges <- read.csv("sitelist.csv")
head(siteedges, n = 15)
sites <- graph_from_data_frame(siteedges, directed = TRUE)
plot(sites)
sitevertices <- read.csv("sitevertices.csv")
sites <- graph_from_data_frame(siteedges, directed = TRUE, vertices = sitevertices)
plot(sites)
sites
plot(sites)
siteDFs <- as_data_frame(sites, what = "both")
str(siteDFs)
write_graph(sites, "sites.graphml", format = "graphml")
ggraph(sites) + geom_node_point() + geom_edge_link()
library("ggraph", lib.loc="~/R/win-library/3.4")
ggraph(sites) + geom_node_point() + geom_edge_link()
ggraph(sites, layout = "kk") + geom_node_point() + geom_edge_link() #using the kk algorithm
ggraph(sites) + geom_node_point() + geom_edge_link() #using nicely default
ggraph(sites, layout = "dendrogram") + geom_node_point() + geom_edge_link() #using the kk algorithm
ggraph(sites, layout = "kk") + geom_node_point() + geom_edge_link() #using the kk algorithm
ggraph(sites) + geom_node_point() + geom_edge_link() #using nicely default
ggraph(sites, layout = "dendrogram", circular = TRUE) + geom_node_point() + geom_edge_link() #using the kk algorithm
ggraph(sites, layout = "kk") + geom_node_point() + geom_edge_link() #using the kk algorithm
ggraph(sites, layout = "dendrogram", circular = TRUE) + geom_node_point() + geom_edge_diagonal() + coord_fixed()
ggraph(sites) + geom_node_point() + geom_edge_link() #using nicely default
ggraph(sites, layout = "kk") + geom_node_point() + geom_edge_link() #using the kk algorithm
ggraph(sites, layout = "dendrogram", circular = TRUE) + geom_node_point() + geom_edge_diagonal() + coord_fixed()
ggraph(sites, layout = "kk") + geom_node_point() + geom_edge_link(aes(colour = Period))
ggraph(sites, layout = "kk") + geom_node_point() + geom_edge_link(aes(colour = period))
ggraph(sites, layout = "kk") + geom_node_point(aes(colour = Period)) + geom_edge_link()
ggraph(sites, layout = "kk") + geom_node_point(aes(colour = Period, size = 2)) + geom_edge_link()
ggraph(sites, layout = "kk") + geom_node_point(aes(colour = Period, cex = 2)) + geom_edge_link()
ggraph(sites, layout = "kk") + geom_node_point(aes(colour = Period), cex = 2) + geom_edge_link()
ggraph(sites, layout = "kk") + geom_node_point(aes(colour = Period), cex = 20) + geom_edge_link()
ggraph(sites, layout = "kk") + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_link()
ggraph(sites, layout = "kk") + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_link() + theme_minimal() #colour and size
ggraph(sites, layout = "kk") + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_link() + theme_minimal() #colour and size
ggraph(sites, layout = "kk") + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_link() + theme_bw() #colour and size
ggraph(sites, layout = "kk") + geom_node_point(aes(shape = Period), cex = 5) + geom_edge_link(aes(colour = "gray")) #colour and size
ggraph(sites, layout = "kk") + geom_node_point(aes(shape = Period), cex = 5) + geom_edge_link() #colour and size
ggraph(sites) + geom_node_point() + geom_edge_link() #using nicely default
ggraph(sites, layout = "kk") + geom_node_point() + geom_edge_link() #using the kk algorithm
ggraph(sites, layout = "dendrogram", circular = TRUE) + geom_node_point() + geom_edge_diagonal() + coord_fixed() #circular dendrogram (if there were enough points)
ggraph(sites, layout = "kk") + geom_node_point(aes(shape = Period), cex = 5) + geom_edge_link() #or with shapes
ggraph(sites, layout = "kk") + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_link() #or with colour(preset)
knitr::opts_chunk$set(echo = TRUE)
hairball
ggraph$hairball
ggraph(sites, layout = "linear") + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_link() #or with colour(preset)
ggraph(sites, layout = "linear") + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_arc() #or with colour(preset)
if(!require("ggthemes")) install.packages('ggraph', repos='http://cran.us.r-project.org') #additional cosmetics
if(!require("ggthemes")) install.packages('ggthemes', repos='http://cran.us.r-project.org') #additional cosmetics
library('ggthemes')
ggraph(sites, layout = "linear") + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_arc() + theme_solid #or with colour(preset)
ggraph(sites, layout = "linear") + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_arc() #or with colour(preset)
ggraph(sites, layout = "linear", circular = TRUE) + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_arc() + coord_fixed #or with colour(preset)
ggraph(sites, layout = "linear", circular = TRUE) + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_arc() + coord_fixed() #or with colour(preset)
ggraph(sites, layout = "linear", circular = TRUE) + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_arc() + coord_fixed() + scale_colour_manual('#44444', '#22222') #or with colour(preset)
ggraph(sites, layout = "linear", circular = TRUE) + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_arc() + coord_fixed() + scale_colour_manual(values=c('#44444', '#22222')) #or with colour(preset)
ggraph(sites, layout = "linear", circular = TRUE) + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_arc() + coord_fixed() + scale_colour_manual(values=c('#bdbdbd', '#dfc27d')) #or with colour(preset)
ggraph(sites, layout = "linear", circular = TRUE) + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_arc() + coord_fixed() + scale_colour_manual(values=c('#bdbdbd', '#dfc27d')) + scale_edge_alpha('Edge direction', guide = 'edge_direction')
ggraph(sites, layout = "linear", circular = TRUE) + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_arc() + coord_fixed() + scale_colour_manual(values=c('#bdbdbd', '#dfc27d')) + scale_edge_alpha('Edge direction', guide = 'edge_direction')
ggraph(sites, layout = "linear") + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_arc() + coord_fixed() + scale_colour_manual(values=c('#bdbdbd', '#dfc27d')) + scale_edge_alpha('Edge direction', guide = 'edge_direction')
ggraph(sites, layout = "linear") + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_arc(alpha=..index..) + coord_fixed() + scale_colour_manual(values=c('#bdbdbd', '#dfc27d')) + scale_edge_alpha('Edge direction', guide = 'edge_direction')
ggraph(sites, layout = "linear", circular = TRUE) + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_arc() + coord_fixed() + scale_colour_manual(values=c('#bdbdbd', '#dfc27d')) + theme_graph() #or with colour(manual)
plot(sites, layout = layout.circle)
rglplot(sites, layout=1)
tkplot(sites, layout=layout.kamada.kawai)
tkplot(sites, layout=layout.kamada.kawai)
l <- layout=layout.kamda.kawai(sites)
l <- layout=layout.kamada.kawai(sites)
tkplot(sites, layout=layout.kamada.kawai)
l <- layout=layout.kamada.kawai(sites)
tkplot(sites, layout=layout.kamada.kawai)
install.packages("cchunts")
2 + 2
Christian <- 2
Christian
Christian + 2
require('igraph')
rm(Christian)
knitr::opts_chunk$set(echo = TRUE)
A <- rbind(c(0,0,1,1), c(1,0,0,0), c(0,0,0,1), c(0,1,0,0)) #matrix creation (4:4)
A
G <- graph_from_adjacency_matrix(A) #function to make a graph from the matrix
plot(G) #plot the matrix i.e. 'G'
NG <- rbind(c("A", "B"), c("B","A"), c("B", "C"), c("C","A")) #matrix creation (2:4)
NG #see NG
G2 <- graph_from_edgelist(NG) #function to make a graph from the edge list
plot(G2) #plot the matrix i.e. 'G2'
plot(G3) #plot the new graph
G3 <- graph_from_literal(A+-B, B-+C, A-+C) #textual description
plot(G3) #plot the new graph
df <- as.data.frame(NG) #creation of NG as a data frame
plot(G4) #plot the new graph
G4 <- graph_from_data_frame(df) #graph from data frame
plot(G4) #plot the new graph
siteedges <- read.csv("sitelist.csv", Header = TRUE) #read the .csv file of links ("from x to y")
siteedges <- read.csv("sitelist.csv") #read the .csv file of links ("from x to y")
head(siteedges, n = 15) #check the first fifteen entries
head(siteedges, n = 15) #check the first fifteen entries
sites <- graph_from_data_frame(siteedges, directed = TRUE) #graph from data frame
plot(sites) #plot graph
plot(sites) #plot graph
plot(sites) #plot graph
#Tree analysis
# Relocate to specific folder
outtree <- read.tree(file = "outtree")
install.packages("C:/Users/cshog/Downloads/GUImorph_1.0.2.05.19.2018.10.30.zip", repos = NULL, type = "win.binary")
library(GUImorph)
install.packages("Morpho",dependencies = TRUE)
library(GUImorph)
install.packages("tcltk2",dependencies = TRUE)
library(GUImorph)
GUImorph()
gm.results$coords
gm.results$Csize
gm.results$consensus
library('Binford')
library('binford')
Bethan <- LRB
head(Bethan)
View(Bethan)
Test <- LRBkey
View(Test)
install.packages("markdown")
install.packages("fdaPDE")
library('fdaPDE')
mesh<-create.MESH.2D(nodes=rbind(c(0, 0), c(0, 1), c(0.5, 0.5), c(1, 1), c(1, 0)),
segments=rbind(c(1, 2), c(2, 3), c(3, 4), c(4, 5), c(5, 1)), order=1)
## Plot it
plot(mesh)
## Creates the basis
FEMbasis = create.FEM.basis(mesh)
## Upload the Meuse data
data(MeuseData)
## Create a triangulation on the convex hull of these data,
## where each data location is a triangle vertex
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], order = 1)
## Plot the mesh
plot(mesh)
## Upload a domain boundary for these data
data(MeuseBorder)
## Create a constrained Delaunay triangulation with the provided boundary
## where each datalocation is a triangle vertex
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = 1)
## Plot the mesh
plot(mesh)
## Upload the Meuse data
data(MeuseData)
## Create a triangulation on the convex hull of these data,
## where each data location is a triangle vertex
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], order = 1)
## Plot the mesh
plot(mesh)
## Upload a domain boundary for these data
data(MeuseBorder)
## Create a constrained Delaunay triangulation with the provided boundary
## where each datalocation is a triangle vertex
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = 1)
## Plot the mesh
plot(mesh)
## Upload a triangular mesh and plot it
data("mesh.2D.rectangular")
plot(mesh.2D.rectangular)
## Create a linear Finite Element basis
FEMbasis = create.FEM.basis(mesh.2D.rectangular)
## Define a sinusoidal function as expansion of this basis and plot it
coeff <- sin(mesh.2D.rectangular$nodes[,1])*cos(mesh.2D.rectangular$nodes[,2])
FEM_object<- FEM(coeff, FEMbasis)
plot(FEM_object)
## Upload a triangular mesh and plot it
data("mesh.2D.rectangular")
plot(mesh.2D.rectangular)
## Create a linear Finite Element basis
FEMbasis = create.FEM.basis(mesh.2D.rectangular)
## Define a sinusoidal function as expansion of this basis and plot it
coeff <- sin(mesh.2D.rectangular$nodes[,1])*cos(mesh.2D.rectangular$nodes[,2])
FEM_object<- FEM(coeff, FEMbasis)
plot(FEM_object)
library(ggplot2)
library(dplyr)
#a hopalong attractor
#ggplot theme blank canvas
opt = theme(legend.position  = "none",
panel.background = element_rect(fill="white"),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())
#attractor function
createTrajectory <- function(n, x0, y0, a, b, c) {
#pre-initialize vectors of length n
x <- vector(mode = "numeric", length = n)
y <- vector(mode = "numeric", length = n)
#starting values
x[1] <- x0
y[1] <- y0
#fill vectors with values
for(i in 2:n) {
x[i] <- y[i-1]-1-sqrt(abs(b*x[i-1]-c))*sign(x[i-1]-1)
y[i] <- a-x[i-1]-1
}
#make dataframe
data.frame(x = x, y = y)
}
#constants
a=2
b=1
c=8
v=3
#calculate positions and plot
df=createTrajectory(3000000, 0, 0, a, b, c)
ggplot(df, aes(x, y)) + geom_point(color="#1E1E1E", shape=46, alpha=.05) + opt
ggplot(df, aes(x, y)) + geom_point(color="#1E1E1E", shape=46, alpha=.05) + opt
library(bibliometrix)
biblioshiny()
install.packages(c("ggforce", "ggplot2", "ggsignif", "markdown", "quantreg", "xml2"))
library(GUImorph, lib.loc = "C:/Program Files/R/R-3.6.1/library")
install.packages("Morpho")
detach("package:GUImorph", unload = TRUE)
library(GUImorph, lib.loc = "C:/Program Files/R/R-3.6.1/library")
install.packages("tcltk2")
library(GUImorph, lib.loc = "C:/Program Files/R/R-3.6.1/library")
GUImorph()
detach("package:GUImorph", unload = TRUE)
great.friends <- c("Christian", "Kaylea", "Cory", "Emma", "Bethan")
call(great.friends)
great.friends
knit_with_parameters('C:/Users/cshog/Dropbox/CHRISTIAN/Academic Work/Articles/Illustration Error - In Prep/submission/finalised_submission/Hoggard_et_al_2019.Rmd')
dataset <- "https://github.com/CSHoggard/-Morph2019/practical_two.csv""
dataset <- "https://github.com/CSHoggard/-Morph2019/practical_two.csv"
dataset <-  read.csv(dataset, header = T)
library(GUImorph, lib.loc = "C:/Program Files/R/R-3.6.1/library")
setwd("C:/Users/cshog/Dropbox/CHRISTIAN/Academic Work/GitHub/-Morph2019/practical_one")
library(geomorph) ### geomorph v.3.1.3 (BETA) (Package for landmark analysis)
SK1 <- read.ply("skull_1.ply", ShowSpecimen = FALSE, addNormals = FALSE) ### import .PLY file
library(GUImorph, lib.loc = "C:/Program Files/R/R-3.6.1/library")
GUImorph()
install_github("cornelmpop/Lithics3D", dependencies=T, build_vignettes=T)
library(devtools)
install_github("cornelmpop/Lithics3D", dependencies=T, build_vignettes=T)
